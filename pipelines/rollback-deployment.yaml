name: CI/CD Pipeline

on:
  push:
    branches:
      - '*'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        feature-branch:
          - feature-1
          - feature-2
          - feature-3
          # Add more feature branches as needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ matrix.feature-branch }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Merge feature branch with main
      run: |
        git checkout main
        git merge ${{ matrix.feature-branch }}
        git push origin main

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ github.sha }}
        username: ${{ secrets.DOCKER_USERNAME }}

    - name: Deploy to server
      run: |
        ssh user@${{ secrets.SERVER_IP }} 'docker pull ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest'
        ssh user@${{ secrets.SERVER_IP }} 'docker stop your-container-name || true'
        ssh user@${{ secrets.SERVER_IP }} 'docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest'

  rollback:
    needs: build_and_deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout main branch
      uses: actions/checkout@v2
      with:
        ref: main

    - name: Rollback to previous commit
      run: |
        git reset --hard HEAD^
        git push origin main -f

    - name: Build and push Docker image (after rollback)
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ github.sha }}
        username: ${{ secrets.DOCKER_USERNAME }}

    - name: Deploy to server (after rollback)
      run: |
        ssh user@${{ secrets.SERVER_IP }} 'docker pull ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest'
        ssh user@${{ secrets.SERVER_IP }} 'docker stop your-container-name || true'
        ssh user@${{ secrets.SERVER_IP }} 'docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/your-image-name:latest'

